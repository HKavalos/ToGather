# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\LuckyCat\PycharmProjects\ToGather\framework.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from functools import partial

from togather_client import *
from PyQt5 import QtCore, QtGui, QtWidgets, QtChart
from PyQt5.Qt import Qt
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QDialog
from PyQt5.QtChart import QChart, QChartView, QValueAxis, QBarCategoryAxis, QBarSet, QBarSeries
from PyQt5.uic import loadUi
from PyQt5.QtGui import QMovie
from group import Group
from user import User
from event import Event
from option import Option
from VoteButton import VoteButton
from togather_server import *
import eventwidget
import groupwidget
import votingwidget
import importlib.resources as importlib_resources
from qt_material import apply_stylesheet
from message import Message

def main():
    global app
    app = QtWidgets.QApplication(["ToGather"])
    MainWindow = QtWidgets.QMainWindow()
    apply_stylesheet(app, theme='light_teal.xml', invert_secondary=True)
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    print()

    # Try to start server.
    # TODO: We need to test this using our nonlocal server.
    try:
        server = StartServer()  # From togather_server module
        server.start()
    except OSError:
        print("Server already started by other local client")

    # Start client.
    address = ("localhost", 55557)
    client = Client(address)
    try:  # Always close connection when failing.
        client.start()
    except:
        Client.exit()
    print("Client started.")

    # Initialize database if it doesn't exist.
    if not os.path.isfile("db.db"):
        Data.create_tables()

    # Load database from the client that is running the server.
    # If this is the client running the server, just reloads the database.
    # Only relevant if two clients are running from separate directories.
    Data.db_request()

    # Close client when UI is exited.
    ret = app.exec_()
    if client.is_alive():
        client.exit()
    sys.exit(ret)


class windowPopup(QDialog):
    def __init__(self, name, parent=None):
        super().__init__(parent)
        self.name = name
        
class Ui_MainWindow(QMainWindow):  # changed to QMainWindow from object
    circlearr = []

    def setupUi(self, MainWindow):
        self.current_user = None
        self.current_group = None

        # Main
        MainWindow.setWindowTitle("ToGather")
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1280, 720)
        MainWindow.show()
        self.centralwidget = QtWidgets.QStackedWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.mainTab = QtWidgets.QTabWidget(self.centralwidget)
        self.mainTab.setGeometry(QtCore.QRect(0, 0, 1280, 720))
        self.mainTab.setAutoFillBackground(True)
        self.mainTab.setObjectName("mainTab")

        self.splashWindow = SplashScreen(MainWindow, self)
        self.centralwidget.addWidget(self.splashWindow)
        self.centralwidget.addWidget(self.mainTab)

        # Home
        self.home_tab = QtWidgets.QWidget()
        self.home_tab.setObjectName("home_tab")
        self.home_votes_widget = QtWidgets.QTabWidget(self.home_tab)
        self.home_votes_widget.setGeometry(QtCore.QRect(40, 170, 320, 341))
        self.home_votes_widget.setObjectName("home_votes_widget")
        self.finished_vote_tab = QtWidgets.QWidget()
        self.finished_vote_tab.setObjectName("finished_vote_tab")
        self.commandLinkButton_3 = QtWidgets.QCommandLinkButton(self.finished_vote_tab)
        self.commandLinkButton_3.setGeometry(QtCore.QRect(10, 30, 185, 41))
        self.commandLinkButton_3.setObjectName("commandLinkButton_3")
        self.commandLinkButton_4 = QtWidgets.QCommandLinkButton(self.finished_vote_tab)
        self.commandLinkButton_4.setGeometry(QtCore.QRect(10, 80, 185, 41))
        self.commandLinkButton_4.setObjectName("commandLinkButton_4")
        self.home_votes_widget.addTab(self.finished_vote_tab, "")
        self.progress_votes_tab = QtWidgets.QWidget()
        self.progress_votes_tab.setObjectName("progress_votes_tab")
        self.commandLinkButton = QtWidgets.QCommandLinkButton(self.progress_votes_tab)
        self.commandLinkButton.setGeometry(QtCore.QRect(10, 20, 185, 41))
        self.commandLinkButton.setObjectName("commandLinkButton")
        self.commandLinkButton_2 = QtWidgets.QCommandLinkButton(self.progress_votes_tab)
        self.commandLinkButton_2.setGeometry(QtCore.QRect(10, 80, 185, 41))
        self.commandLinkButton_2.setObjectName("commandLinkButton_2")
        self.home_votes_widget.addTab(self.progress_votes_tab, "")
        self.home_upcoming_events = QtWidgets.QTextBrowser(self.home_tab)
        self.home_upcoming_events.setGeometry(QtCore.QRect(730, 350, 351, 251))
        self.home_upcoming_events.setObjectName("home_upcoming_events")
        #self.home_login = QtWidgets.QPushButton(self.home_tab)
        #self.home_login.setGeometry(QtCore.QRect(904, 20, 100, 30))
        #self.home_login.setObjectName("home_login")
        #self.home_login.clicked.connect(self.gotologin)
        self.home_logout = QtWidgets.QPushButton(self.home_tab)
        self.home_logout.setGeometry(QtCore.QRect(1010, 20, 100, 30))
        self.home_logout.setObjectName("home_logout")
        self.home_logout.clicked.connect(self.gotosplash)
        self.home_new_messages = QtWidgets.QLabel(self.home_tab)
        self.home_new_messages.setGeometry(QtCore.QRect(30, 30, 141, 16))
        self.home_new_messages.setObjectName("home_new_messages")
        self.background_style = QtWidgets.QLabel(self.home_tab)
        self.background_style.setGeometry(QtCore.QRect(30, 510, 101, 16))
        self.background_style.setObjectName("background_style")
        self.style_button = QtWidgets.QPushButton(self.home_tab)
        self.style_button.setGeometry(QtCore.QRect(30, 550, 118, 34))
        self.style_button.setObjectName("style_button")
        self.style_button.clicked.connect(self.change_theme)
        self.home_image = QtWidgets.QLabel(self.home_tab)
        self.home_image.setGeometry(QtCore.QRect(460, 0, 301, 161))
        self.home_image.setObjectName("home_image")
        self.mainTab.addTab(self.home_tab, "")

        # User Settings
        #self.user_settings_tab = QtWidgets.QWidget()
        #self.user_settings_tab.setObjectName("user_settings_tab")
        #self.user_settings_name = QtWidgets.QLabel(self.user_settings_tab)
        #self.user_settings_name.setGeometry(QtCore.QRect(120, 30, 131, 31))
        #self.user_settings_name.setObjectName("user_settings_name")
        #self.user_settings_profile_pic = QtWidgets.QGraphicsView(self.user_settings_tab)
        #self.user_settings_profile_pic.setGeometry(QtCore.QRect(20, 10, 71, 71))
        #self.user_settings_profile_pic.setObjectName("user_settings_profile_pic")
        #self.notification_settings = QtWidgets.QLabel(self.user_settings_tab)
        #self.notification_settings.setGeometry(QtCore.QRect(70, 210, 124, 21))
        #self.notification_settings.setObjectName("notification_settings")
        #self.checkBox = QtWidgets.QCheckBox(self.user_settings_tab)
        #self.checkBox.setGeometry(QtCore.QRect(80, 250, 70, 17))
        #self.checkBox.setObjectName("checkBox")
        #self.checkBox_2 = QtWidgets.QCheckBox(self.user_settings_tab)
        #self.checkBox_2.setGeometry(QtCore.QRect(80, 280, 70, 17))
        #self.checkBox_2.setObjectName("checkBox_2")
        # self.checkBox_3 = QtWidgets.QCheckBox(self.user_settings_tab)
        # self.checkBox_3.setGeometry(QtCore.QRect(80, 310, 70, 17))
        # self.checkBox_3.setObjectName("checkBox_3")
        #self.privacy_settings = QtWidgets.QLabel(self.user_settings_tab)
        #self.privacy_settings.setGeometry(QtCore.QRect(450, 210, 101, 16))
        #self.privacy_settings.setObjectName("privacy_settings")
        #self.checkBox_4 = QtWidgets.QCheckBox(self.user_settings_tab)
        #self.checkBox_4.setGeometry(QtCore.QRect(450, 250, 70, 17))
        #self.checkBox_4.setObjectName("checkBox_4")
        #self.checkBox_5 = QtWidgets.QCheckBox(self.user_settings_tab)
        #self.checkBox_5.setGeometry(QtCore.QRect(450, 280, 70, 17))
        #self.checkBox_5.setObjectName("checkBox_5")
        #self.submit_settings = QtWidgets.QPushButton(self.user_settings_tab)
        #self.submit_settings.setGeometry(QtCore.QRect(450, 310, 118, 34))
        #self.submit_settings.setObjectName("submit_settings")
        # self.checkBox_6 = QtWidgets.QCheckBox(self.user_settings_tab)
        # self.checkBox_6.setGeometry(QtCore.QRect(450, 310, 70, 17))
        # self.checkBox_6.setObjectName("checkBox_6")
        #self.mainTab.addTab(self.user_settings_tab, "")

        # Events + Circles Merger
        self.merger_tab = QtWidgets.QWidget()
        self.merger_tab.setObjectName("merger_tab")
        self.mainTab.addTab(self.merger_tab, "")
        self.merger_group_name = QtWidgets.QLabel(self.merger_tab)
        self.merger_group_name.setGeometry(QtCore.QRect(10, 50, 281, 61))
        font = QtGui.QFont()
        font.setPointSize(24)
        self.merger_group_name.setFont(font)
        self.merger_group_name.setObjectName("merger_group_name")
        self.merger_event_scroll = QtWidgets.QScrollArea(self.merger_tab)
        self.merger_event_scroll.setGeometry(QtCore.QRect(10, 145, 801, 471))
        self.merger_event_scroll.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.merger_event_scroll.setWidgetResizable(True)
        self.merger_event_scroll.setObjectName("merger_event_scroll")
        self.merger_event_scroll.setStyleSheet("border: 1px solid black;")
        self.merger_scrollAreaWidgetContents = QtWidgets.QWidget()
        self.merger_scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 799, 469))
        self.merger_scrollAreaWidgetContents.setObjectName("merger_scrollAreaWidgetContents")
        self.gridLayout_5 = QtWidgets.QVBoxLayout(self.merger_scrollAreaWidgetContents)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.merger_event_scroll.setWidget(self.merger_scrollAreaWidgetContents)
        self.merger_member_scroll = QtWidgets.QScrollArea(self.merger_tab)
        self.merger_member_scroll.setGeometry(QtCore.QRect(1020, 145, 241, 471))
        self.merger_member_scroll.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.merger_member_scroll.setWidgetResizable(True)
        self.merger_member_scroll.setObjectName("merger_member_scroll")
        self.merger_member_scroll.setStyleSheet("border: 1px solid black;")
        self.merger_scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.merger_scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 239, 469))
        self.merger_scrollAreaWidgetContents_2.setObjectName("merger_scrollAreaWidgetContents_2")
        self.gridLayout_6 = QtWidgets.QVBoxLayout(self.merger_scrollAreaWidgetContents_2)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.merger_member_scroll.setWidget(self.merger_scrollAreaWidgetContents_2)
        self.merger_add_event_button = QtWidgets.QPushButton(self.merger_tab)
        self.merger_add_event_button.setGeometry(QtCore.QRect(380, 90, 132, 40))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.merger_add_event_button.setFont(font)
        self.merger_add_event_button.setObjectName("merger_add_event_button")
        self.merger_add_event_button.clicked.connect(self.gotoaddevent)
        self.merger_switch_group_button = QtWidgets.QPushButton(self.merger_tab)
        self.merger_switch_group_button.setGeometry(QtCore.QRect(520, 90, 132, 40))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.merger_switch_group_button.setFont(font)
        self.merger_switch_group_button.setObjectName("merger_switch_group_button")
        self.merger_switch_group_button.clicked.connect(self.gotoyourcircles)
        self.merger_add_group_button = QtWidgets.QPushButton(self.merger_tab)
        self.merger_add_group_button.setGeometry(QtCore.QRect(660, 90, 132, 40))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.merger_add_group_button.setFont(font)
        self.merger_add_group_button.setObjectName("merger_add_group_button")
        self.merger_add_group_button.clicked.connect(self.gotocreate)
        self.merger_add_member_button = QtWidgets.QPushButton(self.merger_tab)
        self.merger_add_member_button.setGeometry(QtCore.QRect(1125, 90, 132, 40))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.merger_add_member_button.setFont(font)
        self.merger_add_member_button.setObjectName("merger_add_member_button")
        self.merger_add_member_button.clicked.connect(self.gotoadd)
        self.merger_event_header = QtWidgets.QLabel(self.merger_tab)
        self.merger_event_header.setGeometry(QtCore.QRect(20, 120, 61, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.merger_event_header.setFont(font)
        self.merger_event_header.setObjectName("merger_event_header")
        self.merger_member_header = QtWidgets.QLabel(self.merger_tab)
        self.merger_member_header.setGeometry(QtCore.QRect(1030, 120, 71, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.merger_member_header.setFont(font)
        self.merger_member_header.setObjectName("merger_member_header")
        MainWindow.setCentralWidget(self.centralwidget)
        self.merger_menubar = QtWidgets.QMenuBar(MainWindow)
        self.merger_menubar.setGeometry(QtCore.QRect(0, 0, 1280, 26))
        self.merger_menubar.setObjectName("merger_menubar")
        MainWindow.setMenuBar(self.merger_menubar)
        self.merger_statusbar = QtWidgets.QStatusBar(MainWindow)
        self.merger_statusbar.setObjectName("merger_statusbar")
        MainWindow.setStatusBar(self.merger_statusbar)

        # Schedule
        self.schedule_tab = QtWidgets.QWidget()
        self.schedule_tab.setObjectName("schedule_tab")

        self.frame = QtWidgets.QFrame(self.schedule_tab) # Sunday
        self.frame.setGeometry(QtCore.QRect(10, 60, 141, 551))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.label_6 = QtWidgets.QLabel(self.frame) # Day
        self.label_6.setGeometry(QtCore.QRect(40, 20, 51, 16))
        self.label_6.setObjectName("label_6")
        self.timeEdit = QtWidgets.QTimeEdit(self.frame)
        self.timeEdit.setGeometry(QtCore.QRect(10, 80, 118, 31))
        self.timeEdit.setObjectName("timeEdit")
        self.label_7 = QtWidgets.QLabel(self.frame) # To
        self.label_7.setGeometry(QtCore.QRect(50, 120, 47, 13))
        self.label_7.setObjectName("label_7")
        self.timeEdit_2 = QtWidgets.QTimeEdit(self.frame)
        self.timeEdit_2.setGeometry(QtCore.QRect(10, 140, 118, 31))
        self.timeEdit_2.setObjectName("timeEdit_2")
        self.label_8 = QtWidgets.QLabel(self.frame) # Not Available
        self.label_8.setGeometry(QtCore.QRect(30, 60, 79, 16))
        self.label_8.setObjectName("label_8")

        self.frame_2 = QtWidgets.QFrame(self.schedule_tab) # Monday
        self.frame_2.setGeometry(QtCore.QRect(160, 60, 141, 551))
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.label_9 = QtWidgets.QLabel(self.frame_2)
        self.label_9.setGeometry(QtCore.QRect(40, 20, 51, 16))
        self.label_9.setObjectName("label_9")
        self.timeEdit_3 = QtWidgets.QTimeEdit(self.frame_2)
        self.timeEdit_3.setGeometry(QtCore.QRect(10, 80, 118, 31))
        self.timeEdit_3.setObjectName("timeEdit_3")
        self.label_10 = QtWidgets.QLabel(self.frame_2)
        self.label_10.setGeometry(QtCore.QRect(50, 120, 47, 13))
        self.label_10.setObjectName("label_10")
        self.timeEdit_4 = QtWidgets.QTimeEdit(self.frame_2)
        self.timeEdit_4.setGeometry(QtCore.QRect(10, 140, 118, 31))
        self.timeEdit_4.setObjectName("timeEdit_4")
        self.label_11 = QtWidgets.QLabel(self.frame_2)
        self.label_11.setGeometry(QtCore.QRect(30, 60, 79, 16))
        self.label_11.setObjectName("label_11")

        self.frame_33 = QtWidgets.QFrame(self.schedule_tab) # Tuesday
        self.frame_33.setGeometry(QtCore.QRect(310, 60, 141, 551))
        self.frame_33.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_33.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_33.setObjectName("frame_33")
        self.label_12 = QtWidgets.QLabel(self.frame_33)
        self.label_12.setGeometry(QtCore.QRect(40, 20, 51, 16))
        self.label_12.setObjectName("label_12")
        self.timeEdit_5 = QtWidgets.QTimeEdit(self.frame_33)
        self.timeEdit_5.setGeometry(QtCore.QRect(10, 80, 118, 31))
        self.timeEdit_5.setObjectName("timeEdit_5")
        self.label_13 = QtWidgets.QLabel(self.frame_33)
        self.label_13.setGeometry(QtCore.QRect(50, 120, 47, 13))
        self.label_13.setObjectName("label_13")
        self.timeEdit_6 = QtWidgets.QTimeEdit(self.frame_33)
        self.timeEdit_6.setGeometry(QtCore.QRect(10, 140, 118, 31))
        self.timeEdit_6.setObjectName("timeEdit_6")
        self.label_14 = QtWidgets.QLabel(self.frame_33)
        self.label_14.setGeometry(QtCore.QRect(30, 60, 79, 16))
        self.label_14.setObjectName("label_14")
        self.mainTab.addTab(self.schedule_tab, "")

        self.frame_21 = QtWidgets.QFrame(self.schedule_tab)  # Wednesday
        self.frame_21.setGeometry(QtCore.QRect(460, 60, 141, 551))
        self.frame_21.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_21.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_21.setObjectName("frame_21")
        self.label_96 = QtWidgets.QLabel(self.frame_21)
        self.label_96.setGeometry(QtCore.QRect(40, 20, 70, 16))
        self.label_96.setObjectName("label_96")
        self.timeEdit_27 = QtWidgets.QTimeEdit(self.frame_21)
        self.timeEdit_27.setGeometry(QtCore.QRect(10, 80, 118, 31))
        self.timeEdit_27.setObjectName("timeEdit_27")
        self.label_97 = QtWidgets.QLabel(self.frame_21)
        self.label_97.setGeometry(QtCore.QRect(50, 120, 47, 13))
        self.label_97.setObjectName("label_97")
        self.timeEdit_28 = QtWidgets.QTimeEdit(self.frame_21)
        self.timeEdit_28.setGeometry(QtCore.QRect(10, 140, 118, 31))
        self.timeEdit_28.setObjectName("timeEdit_28")
        self.label_98 = QtWidgets.QLabel(self.frame_21)
        self.label_98.setGeometry(QtCore.QRect(30, 60, 79, 16))
        self.label_98.setObjectName("label_98")

        self.frame_3 = QtWidgets.QFrame(self.schedule_tab)  # Thursday
        self.frame_3.setGeometry(QtCore.QRect(610, 60, 141, 551))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.label_28 = QtWidgets.QLabel(self.frame_3)
        self.label_28.setGeometry(QtCore.QRect(40, 20, 55, 16))
        self.label_28.setObjectName("label_28")
        self.timeEdit_7 = QtWidgets.QTimeEdit(self.frame_3)
        self.timeEdit_7.setGeometry(QtCore.QRect(10, 80, 118, 31))
        self.timeEdit_7.setObjectName("timeEdit_7")
        self.label_22 = QtWidgets.QLabel(self.frame_3)
        self.label_22.setGeometry(QtCore.QRect(50, 120, 47, 13))
        self.label_22.setObjectName("label_22")
        self.timeEdit_8 = QtWidgets.QTimeEdit(self.frame_3)
        self.timeEdit_8.setGeometry(QtCore.QRect(10, 140, 118, 31))
        self.timeEdit_8.setObjectName("timeEdit_8")
        self.label_23 = QtWidgets.QLabel(self.frame_3)
        self.label_23.setGeometry(QtCore.QRect(30, 60, 79, 16))
        self.label_23.setObjectName("label_23")

        self.frame_22 = QtWidgets.QFrame(self.schedule_tab)  # Friday
        self.frame_22.setGeometry(QtCore.QRect(760, 60, 141, 551))
        self.frame_22.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_22.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_22.setObjectName("frame_22")
        self.label_29 = QtWidgets.QLabel(self.frame_22)
        self.label_29.setGeometry(QtCore.QRect(40, 20, 51, 16))
        self.label_29.setObjectName("label_29")
        self.timeEdit_11 = QtWidgets.QTimeEdit(self.frame_22)
        self.timeEdit_11.setGeometry(QtCore.QRect(10, 80, 118, 31))
        self.timeEdit_11.setObjectName("timeEdit_11")
        self.label_13 = QtWidgets.QLabel(self.frame_22)
        self.label_13.setGeometry(QtCore.QRect(50, 120, 47, 13))
        self.label_13.setObjectName("label_13")
        self.timeEdit_67 = QtWidgets.QTimeEdit(self.frame_22)
        self.timeEdit_67.setGeometry(QtCore.QRect(10, 140, 118, 31))
        self.timeEdit_67.setObjectName("timeEdit_67")
        self.label_32 = QtWidgets.QLabel(self.frame_22)
        self.label_32.setGeometry(QtCore.QRect(30, 60, 79, 16))
        self.label_32.setObjectName("label_32")

        self.frame_5 = QtWidgets.QFrame(self.schedule_tab)  # Saturday
        self.frame_5.setGeometry(QtCore.QRect(910, 60, 141, 551))
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.label_24 = QtWidgets.QLabel(self.frame_5)
        self.label_24.setGeometry(QtCore.QRect(40, 20, 58, 16))
        self.label_24.setObjectName("label_24")
        self.timeEdit_9 = QtWidgets.QTimeEdit(self.frame_5)
        self.timeEdit_9.setGeometry(QtCore.QRect(10, 80, 118, 31))
        self.timeEdit_9.setObjectName("timeEdit_9")
        self.label_26 = QtWidgets.QLabel(self.frame_5)
        self.label_26.setGeometry(QtCore.QRect(50, 120, 47, 13))
        self.label_26.setObjectName("label_26")
        self.timeEdit_10 = QtWidgets.QTimeEdit(self.frame_5)
        self.timeEdit_10.setGeometry(QtCore.QRect(10, 140, 118, 31))
        self.timeEdit_10.setObjectName("timeEdit_10")
        self.label_27 = QtWidgets.QLabel(self.frame_5)
        self.label_27.setGeometry(QtCore.QRect(30, 60, 79, 16))
        self.label_27.setObjectName("label_27")

        # Messages
        self.messages_tab = QtWidgets.QWidget()
        self.messages_tab.setObjectName("messages_tab")
        self.scrollArea_3 = QtWidgets.QScrollArea(self.messages_tab)
        self.scrollArea_3.setGeometry(QtCore.QRect(20, 40, 1081, 481))
        self.scrollArea_3.setWidgetResizable(True)
        self.scrollArea_3.setObjectName("scrollArea_3")
        self.scrollAreaWidgetContents_3 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_3.setGeometry(QtCore.QRect(0, 0, 1079, 479))
        self.scrollAreaWidgetContents_3.setObjectName("scrollAreaWidgetContents_3")
        self.textBrowser_2 = QtWidgets.QTextBrowser(self.scrollAreaWidgetContents_3)
        self.textBrowser_2.setGeometry(QtCore.QRect(0, 0, 1081, 121))
        self.textBrowser_2.setObjectName("textBrowser_2")
        self.textBrowser_3 = QtWidgets.QTextBrowser(self.scrollAreaWidgetContents_3)
        self.textBrowser_3.setGeometry(QtCore.QRect(0, 360, 1081, 121))
        self.textBrowser_3.setObjectName("textBrowser_3")
        self.textBrowser_4 = QtWidgets.QTextBrowser(self.scrollAreaWidgetContents_3)
        self.textBrowser_4.setGeometry(QtCore.QRect(0, 120, 1081, 121))
        self.textBrowser_4.setObjectName("textBrowser_4")
        self.textBrowser_5 = QtWidgets.QTextBrowser(self.scrollAreaWidgetContents_3)
        self.textBrowser_5.setGeometry(QtCore.QRect(0, 240, 1081, 121))
        self.textBrowser_5.setObjectName("textBrowser_5")
        self.scrollArea_3.setWidget(self.scrollAreaWidgetContents_3)
        self.mainTab.addTab(self.messages_tab, "")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1280, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # Establishing Initial Settings
        self.retranslateUi(MainWindow)
        self.mainTab.setCurrentIndex(0)
        self.home_votes_widget.setCurrentIndex(1)
        # self.stackedWidget_3.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.centralwidget.setCurrentIndex(0)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Welcome Page"))

        # Home
        self.commandLinkButton_3.setText(_translate("MainWindow", "Vote 1"))
        self.commandLinkButton_4.setText(_translate("MainWindow", "Vote 2"))
        self.home_votes_widget.setTabText(self.home_votes_widget.indexOf(self.finished_vote_tab),
                                          _translate("MainWindow", "Finished Votes"))
        self.commandLinkButton.setText(_translate("MainWindow", "Vote 1"))
        self.commandLinkButton_2.setText(_translate("MainWindow", "Vote 2"))
        self.home_votes_widget.setTabText(self.home_votes_widget.indexOf(self.progress_votes_tab),
                                          _translate("MainWindow", "In-Progress Votes"))
        self.home_upcoming_events.setHtml(_translate("MainWindow",
                                                     "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                                     "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                                     "p, li { white-space: pre-wrap; }\n"
                                                     "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
                                                     "<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:16pt;\">Upcoming Events</span></p></body></html>"))
        #self.home_login.setText(_translate("MainWindow", "Log In"))
        self.home_logout.setText(_translate("MainWindow", "Log Out "))
        self.home_new_messages.setText(_translate("MainWindow", "x New Messages"))
        self.home_image.setText(_translate("MainWindow",
                                           "<html><head/><body><p align=\"center\">ToGather </p><p align=\"center\">(logo not implemented remotely yet)</p></body></html>"))
       # with importlib_resources.path(bin, "Logo.png") as p:
       #     path = p
        pixmap = QtGui.QPixmap("Logo.png")
        self.home_image.setPixmap(pixmap)
        self.home_image.setScaledContents(True)
        self.mainTab.setTabText(self.mainTab.indexOf(self.home_tab), _translate("MainWindow", "Home"))

        # User Settings
        #self.user_settings_name.setText(_translate("MainWindow", "Name"))
        #self.notification_settings.setText(_translate("MainWindow", "Notification Settings"))
        #self.checkBox.setText(_translate("MainWindow", "On"))
        #self.checkBox_2.setText(_translate("MainWindow", "Off"))
        # self.checkBox_3.setText(_translate("MainWindow", "CheckBox"))
        #self.privacy_settings.setText(_translate("MainWindow", "Privacy Settings"))
        #self.checkBox_4.setText(_translate("MainWindow", "Public"))
        #self.checkBox_5.setText(_translate("MainWindow", "Private"))
        #self.submit_settings.setText(_translate("MainWindow", "Submit \n Settings")) # does the \n cause issues?
        self.background_style.setText(_translate("MainWindow", "Style Settings"))
        self.style_button.setText(_translate("MainWindow", "Dark Mode"))
        # self.checkBox_6.setText(_translate("MainWindow", "CheckBox"))
        #self.mainTab.setTabText(self.mainTab.indexOf(self.user_settings_tab), _translate("MainWindow", "User Settings"))

        # Events + Circles Merger
        self.mainTab.setTabText(self.mainTab.indexOf(self.merger_tab), _translate("MainWindow", "Circles"))
        self.merger_group_name.setText(_translate("MainWindow", "Group Name"))
        self.merger_add_event_button.setText(_translate("MainWindow", "Add Event"))
        self.merger_switch_group_button.setText(_translate("MainWindow", "Switch Group"))
        self.merger_add_group_button.setText(_translate("MainWindow", "Add Group"))
        self.merger_add_member_button.setText(_translate("MainWindow", "Add Member"))
        self.merger_event_header.setText(_translate("MainWindow", "Events:"))
        self.merger_member_header.setText(_translate("MainWindow", "Members:"))

        # Schedule
        self.label_6.setText(_translate("MainWindow", "Sunday"))
        self.label_7.setText(_translate("MainWindow", "to"))
        self.label_8.setText(_translate("MainWindow", "Not Available"))
        self.label_9.setText(_translate("MainWindow", "Monday"))
        self.label_10.setText(_translate("MainWindow", "to"))
        self.label_11.setText(_translate("MainWindow", "Not Available"))
        self.label_12.setText(_translate("MainWindow", "Tuesday"))
        self.label_13.setText(_translate("MainWindow", "to"))
        self.label_14.setText(_translate("MainWindow", "Not Available"))
        self.label_96.setText(_translate("MainWindow", "Wednesday"))
        self.label_97.setText(_translate("MainWindow", "to"))
        self.label_98.setText(_translate("MainWindow", "Not Available"))
        self.label_28.setText(_translate("MainWindow", "Thursday"))
        self.label_22.setText(_translate("MainWindow", "to"))
        self.label_23.setText(_translate("MainWindow", "Not Available"))
        self.label_29.setText(_translate("MainWindow", "Friday"))
        self.label_13.setText(_translate("MainWindow", "to"))
        self.label_32.setText(_translate("MainWindow", "Not Available"))
        self.label_24.setText(_translate("MainWindow", "Saturday"))
        self.label_26.setText(_translate("MainWindow", "to"))
        self.label_27.setText(_translate("MainWindow", "Not Available"))
        self.mainTab.setTabText(self.mainTab.indexOf(self.schedule_tab), _translate("MainWindow", "Schedule"))

        self.textBrowser_2.setHtml(_translate("MainWindow",
                                              "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                              "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                              "p, li { white-space: pre-wrap; }\n"
                                              "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
                                              "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:18pt;\">First Last</span></p>\n"
                                              "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:18pt;\"><br /></p></body></html>"))
        self.textBrowser_3.setHtml(_translate("MainWindow",
                                              "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                              "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                              "p, li { white-space: pre-wrap; }\n"
                                              "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
                                              "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:18pt;\">First Last</span></p>\n"
                                              "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:18pt;\"><br /></p></body></html>"))
        self.textBrowser_4.setHtml(_translate("MainWindow",
                                              "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                              "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                              "p, li { white-space: pre-wrap; }\n"
                                              "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
                                              "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:18pt;\">First Last</span></p>\n"
                                              "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:18pt;\"><br /></p></body></html>"))
        self.textBrowser_5.setHtml(_translate("MainWindow",
                                              "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
                                              "<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
                                              "p, li { white-space: pre-wrap; }\n"
                                              "</style></head><body style=\" font-family:\'MS Shell Dlg 2\'; font-size:8.25pt; font-weight:400; font-style:normal;\">\n"
                                              "<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:18pt;\">First Last</span></p>\n"
                                              "<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px; font-size:18pt;\"><br /></p></body></html>"))

        # Messages
        self.mainTab.setTabText(self.mainTab.indexOf(self.messages_tab), _translate("MainWindow", "Messages"))

    def gotosplash(self):
        self.current_user = None
        self.centralwidget.setCurrentIndex(0)

    def gotologin(self):
        self.login_page = LogIn(self)
        self.login_page.adjustSize()
        self.login_page.show()

    def gotocreate(self):
        self.groupcreate = GroupCreate(self)
        self.groupcreate.adjustSize()
        self.groupcreate.show()

    def gotoadd(self):
        self.addmember = AddMember(self)
        self.addmember.adjustSize()
        self.addmember.show()

    def removeMember(self, group, name):
        groupobj = Data.get_groups(group)
        groupobj.users.remove(name)
        Data.update_group(Group(groupobj.name, groupobj.calendar, groupobj.users, groupobj.events, groupobj.messages))
        user = Data.get_users(name)
        user.groups.remove(group)
        Data.update_user(user)
        if name == self.current_user.name:
            user = Data.get_users(name)
            if len(user.groups) == 0:
                layout = self.merger_scrollAreaWidgetContents.layout()
                layout2 = self.merger_scrollAreaWidgetContents_2.layout()
                for i in reversed(range(layout.count())):
                    layout.itemAt(i).widget().setParent(None)
                for i in reversed(range(layout2.count())):
                    layout2.itemAt(i).widget().setParent(None)
                self.merger_group_name.setText("")
            else:
                self.update_group(Data.get_groups(user.groups[0]))
        else:
            self.update_group(groupobj)
        if len(groupobj.users) == 0:
            Data.delete_group(Data.get_groups(group))

    def gotoaddevent(self):
        self.newevent = NewEvent(self)
        self.newevent.adjustSize()
        self.newevent.show()

    def gotovoting(self, e, c):
        if e.status == False:
            self.voting = VotingPoll(self, e, c)
            self.voting.show()
        else:
            vote_msg = QtWidgets.QMessageBox()
            vote_msg.setIcon(QtWidgets.QMessageBox.Warning)
            vote_msg.setWindowTitle("Voting Finished")
            vote_msg.setText("The voting has already finished for this event.")
            vote_msg.exec_()


    def gotooptions(self, e):
        self.customoptions = OptionSettings(self, e)
        self.customoptions.show()


    def gotoyourcircles(self, event):
        self.yourcircles = YourCircles(self)
        self.yourcircles.adjustSize()
        self.yourcircles.show()

    def update_group(self, new_group):
        self.current_group = new_group.name
        layout = self.merger_scrollAreaWidgetContents.layout()
        layout2 = self.merger_scrollAreaWidgetContents_2.layout()
        for i in reversed(range(layout.count())):
            layout.itemAt(i).widget().setParent(None)
        for i in reversed(range(layout2.count())):
            layout2.itemAt(i).widget().setParent(None)
        self.merger_group_name.setText(new_group.name)
        loadUi("newevent.ui")
        for event in Data.get_events(None, new_group.name):
            app = QtWidgets.QFrame()
            frames = eventwidget.Ui_Form()
            frames.setupUi(app)
            frames.name_label.setText("Name: " + event.name)
            frames.date_label.setText("Date: " + event.description)
            frames.vote_go_button.clicked.connect(
                lambda checked, a=event, b=new_group: self.gotovoting(a, b))
            frames.op_go_button.clicked.connect(lambda checked, a=event: self.gotooptions(a))
            layout.addWidget(app)
        for member in Data.get_groups(self.current_group).users:
            self.memwidget = loadUi("member.ui")
            self.memwidget.removeButton.clicked.connect(
                partial(self.removeMember,new_group.name, member))
            self.memwidget.memberName.setText(member)
            self.merger_scrollAreaWidgetContents_2.layout().addWidget(self.memwidget)
        # print(len(self.groups))

    def add_member_group(self, new_user, the_group):
        new_name = new_user  # need to find a way to get
        print(new_user)
        print(the_group)

        if new_name != "":
            self.label_16.setText(new_name)


    def update_event(self, event):
        self.event_title.setText(event.name)
        self.event_date.setText(event.description)  # time equals place??
        self.event_place.setText(event.options)

    def change_theme(self):
        if self.style_button.text() == "Dark Mode":
            apply_stylesheet(app, theme='dark_teal.xml', invert_secondary=False)
            pixmap = QtGui.QPixmap("Dark_Logo.png")
            self.splashWindow.splash_image.setPixmap(pixmap)
            self.home_image.setPixmap(pixmap)
            self.home_image.setScaledContents(True)
            self.style_button.setText("Light Mode")
        else:
            apply_stylesheet(app, theme='light_teal.xml', invert_secondary=True)
            pixmap = QtGui.QPixmap("Logo.png")
            self.splashWindow.splash_image.setPixmap(pixmap)
            self.home_image.setPixmap(pixmap)
            self.home_image.setScaledContents(True)
            self.style_button.setText("Dark Mode")

class SplashScreen(QMainWindow):
    def __init__(self, parent, window):
        super(SplashScreen, self).__init__(parent)
        self.parent = parent
        self.window = window
        self.setWindowTitle("ToGather")
        self.setObjectName("SplashWindow")

        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("SplashWindow", "Welcome!"))

        self.splash_image = QtWidgets.QLabel(self)
        self.splash_image.setGeometry(QtCore.QRect(300, 0, 641, 312))
        self.splash_image.setObjectName("splash_image")
        pixmap = QtGui.QPixmap("Logo.png")
        self.splash_image.setPixmap(pixmap)
        self.splash_image.setScaledContents(True)

        self.splash_login = QtWidgets.QPushButton(self)
        self.splash_login.setGeometry(QtCore.QRect(360, 300, 500, 50))
        self.splash_login.setObjectName("splash_login")
        self.splash_login.clicked.connect(self.login)
        self.splash_login.setText(_translate("MainWindow", "Log In"))

        self.splash_signup = QtWidgets.QPushButton(self)
        self.splash_signup.setGeometry(QtCore.QRect(360, 350, 500, 50))
        self.splash_signup.setObjectName("splash_signup")
        self.splash_signup.clicked.connect(self.signup)
        self.splash_signup.setText(_translate("MainWindow", "Sign Up"))

    def login(self):
        self.login_page = LogIn(self, self.window)
        self.login_page.adjustSize()
        self.login_page.show()

    def signup(self):
        self.signup_page = SignUp(self, self.window)
        self.signup_page.adjustSize()
        self.signup_page.show()

class VoteRes(QMainWindow):
    def __init__(self, parent):
        super(VoteRes, self).__init__(parent)
        self.parent = parent
        loadUi("voting_res.ui", self)
        self.return_button.clicked.connect(self.return_voting)

    def return_voting(self):
        print("Return to Voting")
        self.close()
        
class LogIn(QMainWindow):
    def __init__(self, parent, window):
        super(LogIn, self).__init__(parent)
        self.parent = parent
        self.window = window
        #with importlib_resources.path(bin, "login.ui") as p:
        #    path = p
        loadUi("login.ui", self)
        self.login_password_entry.setEchoMode(QtWidgets.QLineEdit.Password)
        self.login_acc_button.clicked.connect(self.login_acc)
        self.signup_button.clicked.connect(self.nav)

    # Method that runs when login button is pressed.
    def login_acc(self):
        # Check if username exists.
        if Data.get_users(self.login_username_entry.text()):
            # Check if password matches the password from database.
            user = Data.get_users(self.login_username_entry.text())
            if user.password == self.login_password_entry.text():
                # Update the current_user variable stored in MainWindow
                msg = QtWidgets.QMessageBox()
                msg.setIcon(QtWidgets.QMessageBox.Information)
                msg.setWindowTitle("Login Success")
                msg.setText("You have successfully logged in as "+user.name)
                msg.exec_()

                self.window.current_user = user
                if len(Data.get_users(user.name).groups) == 0:
                    layout = self.window.merger_scrollAreaWidgetContents.layout()
                    layout2 = self.window.merger_scrollAreaWidgetContents_2.layout()
                    for i in reversed(range(layout.count())):
                        layout.itemAt(i).widget().setParent(None)
                    for i in reversed(range(layout2.count())):
                        layout2.itemAt(i).widget().setParent(None)
                    self.window.merger_group_name.setText("")
                else:
                    self.window.update_group(Data.get_groups(user.groups[0]))
                # TODO: Create a method to update other UI objects that use current user.
                #self.parent.user_settings_name.setText(self.parent.current_user.name)
                self.window.centralwidget.setCurrentIndex(1)
                self.close()
            else:
                err_msg = QtWidgets.QMessageBox()
                err_msg.setIcon(QtWidgets.QMessageBox.Warning)
                err_msg.setWindowTitle("Login Failed")
                err_msg.setText("Incorrect password. Please try again.")
                err_msg.exec_()
        else:
            err_msg = QtWidgets.QMessageBox()
            err_msg.setIcon(QtWidgets.QMessageBox.Warning)
            err_msg.setWindowTitle("Login Failed")
            err_msg.setText("Username does not exist. Please retype the username or sign up a new account.")
            err_msg.exec_()


        #valid = [x for x, y in enumerate(self.parent.usersarr) if y[0] == self.login_username_entry.text() and y[1] == self.login_password_entry.text()]
        #if valid:
        #    print("Logged In")
        #    self.close()
        #else:
        #    print("Invalid login!")

    def nav(self):
        print("To Signup!")
        self.signup_window = SignUp(self, self.window)
        self.setWindowTitle("Sign Up")
        self.signup_window.adjustSize()
        self.signup_window.show()
        self.close()


class SignUp(QMainWindow):
    def __init__(self, parent, window):
        super(SignUp, self).__init__(parent)
        self.parent = parent
        self.window = window
        #with importlib_resources.path(bin, "signup.ui") as p:
        #    path = p
        loadUi(("signup.ui"), self)
        self.signup_password_entry.setEchoMode(QtWidgets.QLineEdit.Password)
        self.signup_c_password_entry.setEchoMode(QtWidgets.QLineEdit.Password)
        self.signup_submit_button.clicked.connect(self.submit)

    def submit(self):
        if (self.signup_username_entry.text() == "" or self.signup_password_entry.text() == "" or self.signup_c_password_entry.text() == ""):
            err_msg = QtWidgets.QMessageBox()
            err_msg.setIcon(QtWidgets.QMessageBox.Warning)
            err_msg.setWindowTitle("Signup Failed")
            err_msg.setText("Please enter info into all empty fields.")
            err_msg.exec_()
        elif self.signup_password_entry.text() == self.signup_c_password_entry.text():

            # Add user to local array for testing.
            #userpair = (self.signup_username_entry.text(), self.signup_password_entry.text())
            #self.parent.usersarr.append(userpair)

            # Make sure username doesn't already exist.
            if not Data.get_users(self.signup_username_entry.text()):
                # Add new user to database.
                user = User(self.signup_username_entry.text(), self.signup_password_entry.text())
                Data.add_user(user)

                # Update the current_user variable stored in MainWindow
                self.window.current_user = user
                if len(Data.get_users(user.name).groups) == 0:
                    layout = self.window.merger_scrollAreaWidgetContents.layout()
                    layout2 = self.window.merger_scrollAreaWidgetContents_2.layout()
                    for i in reversed(range(layout.count())):
                        layout.itemAt(i).widget().setParent(None)
                    for i in reversed(range(layout2.count())):
                        layout2.itemAt(i).widget().setParent(None)
                    self.window.merger_group_name.setText("")
                # TODO: Create a method to update all UI objects that use current user.
                # Update UI elements that relate to current user.
                #self.parent.parent.user_settings_name.setText(self.parent.current_user.name)

                # TODO: Window doesn't close for some reason. Go to user settings page after signing up?
                err_msg = QtWidgets.QMessageBox()
                err_msg.setIcon(QtWidgets.QMessageBox.Warning)
                err_msg.setWindowTitle("Signup Success")
                err_msg.setText("Your new account has been successfully created. Welcome "+user.name)
                err_msg.exec_()

                self.window.centralwidget.setCurrentIndex(1)
                self.close()
            else:
                err_msg = QtWidgets.QMessageBox()
                err_msg.setIcon(QtWidgets.QMessageBox.Warning)
                err_msg.setWindowTitle("Signup Failed")
                err_msg.setText("Username already exists. Please try a new username.")
                err_msg.exec_()
        else:
            err_msg = QtWidgets.QMessageBox()
            err_msg.setIcon(QtWidgets.QMessageBox.Warning)
            err_msg.setWindowTitle("Signup Failed")
            err_msg.setText("Passwords do not match. Please retype the passwords.")
            err_msg.exec_()


class GroupCreate(QMainWindow):
    def __init__(self, parent):
        super(GroupCreate, self).__init__(parent)
        self.parent = parent
        #with importlib_resources.path(bin, "popup.ui") as p:
        #    path = p
        loadUi("popup.ui", self)
        self.submission_button.clicked.connect(self.submit)

    def submit(self):
        if Data.get_groups((self.group_name_entry.text())):
            print("Group already exists!")
        else:
            print("Submitted")
            f = QtWidgets.QFrame()
            frames = groupwidget.Ui_Form()
            frames.setupUi(f)
            frames.group_name_label.setText("Circle Name: " + self.group_name_entry.text())
            memberarr = [self.parent.current_user.name]
            eventarr = []
            grouptuple = Group(self.group_name_entry.text(), "", memberarr, eventarr)
            self.parent.circlearr.append(grouptuple)
            Data.add_group(grouptuple)
            user = Data.get_users(self.parent.current_user.name)
            user.groups.append(grouptuple.name)
            Data.update_user(user)
            #bellow is not needed but kept incase for styling
            #grouplist = user.groups
            #grouplist.append(grouptuple)
            self.parent.current_user = Data.get_users(user.name)
            #self.parent.merger_scrollAreaWidgetContents.layout().addWidget(f)
            self.parent.update_group(grouptuple)
            self.close()

class VotingPoll(QMainWindow):
    def __init__(self, parent, e, c):
        super(VotingPoll, self).__init__(parent)
        self.parent = parent
        self.cbs = []
        self.user = self.parent.current_user.name
        self.counter = 0

        loadUi("voting.ui", self)
        self.vote_scroll = QtWidgets.QScrollArea(self)
        self.vote_scroll.setGeometry(QtCore.QRect(150, 70, 800, 250))
        self.vote_scroll.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.vote_scroll.setObjectName("vote_scroll")
        self.vote_scroll.setWidgetResizable(True)
        self.vote_scroll_contents = QtWidgets.QWidget()
        self.vote_scroll_contents.setGeometry(QtCore.QRect(0, 0, 300, 300))
        self.vote_grid = QtWidgets.QVBoxLayout(self.vote_scroll_contents)
        self.vote_grid.setObjectName("vote_grid")
        self.vote_scroll.setWidget(self.vote_scroll_contents)
        self.submitVote.clicked.connect(lambda checked, a=e, b=c: self.submit(e,c))

        count = 1
        for x in e.options:

            self.f = QtWidgets.QFrame(self)
            self.f.setGeometry(QtCore.QRect(100, 100, 721, 61))
            self.f.setFrameShape(QtWidgets.QFrame.StyledPanel)
            self.f.setFrameShadow(QtWidgets.QFrame.Raised)
            self.f.setObjectName("f" + str(count))

            self.frames = votingwidget.Ui_Form()
            self.frames.setupUi(self.f)

            content = "Name: "+x.name+"\nActivity: "+x.activity+"\nLocation: "+x.location+"\nTime: "+str(x.time)+"\n"
            self.frames.option_info.setText(content)

            self.vote_choices = self.optionComboBox(self.f, e, x)
            self.cbs.append(self.vote_choices)
            self.vote_scroll_contents.layout().addWidget(self.f)

            x.votes[self.user] = 1

            count += 1

    def optionComboBox(self, f, e, x):

        cb = QtWidgets.QComboBox(f)
        cb.setGeometry(650, 5, 120, 60)
        for i in range(1, len(e.options) + 1):
            cb.addItem("Choice {0}".format(i))
        cb.currentIndexChanged.connect(lambda checked, a=x, b=cb: self.vote(a, b))

        return cb

    def vote(self, x, cb):
        x.votes[self.user] = cb.currentIndex()+1

    def submit(self, e, c):
        submit_msg = QtWidgets.QMessageBox()
        submit_msg.setIcon(QtWidgets.QMessageBox.Information)

        success = True

        if(len(e.options) == 0):
            submit_msg.setWindowTitle("Submit Failed")
            submit_msg.setText("No options have been added to the event. Your vote has not been submitted.")
            submit_msg.exec_()
            success = False

        for i in range(1, len(e.options)+1):
            dup = 0
            for x in e.options:
                if (x.votes[self.user] == i):
                    dup += 1
            if (dup > 1):
                submit_msg.setWindowTitle("Submit Failed")
                submit_msg.setText("You can only choose one rank for each option. Your vote has not been submitted.")
                submit_msg.exec_()
                success = False
                break

        if success:
            submit_msg.setWindowTitle("Submit Successful")
            submit_msg.setText("Your vote has been submitted.")
            submit_msg.exec_()
            self.counter += 1

            loading = LoadingScreen(self.parent)
            while(self.counter != len(c.users)):
                loading.startAnim()
            loading.stopAnim()
            top = float('inf')
            averages = {}
            choices = []
            winner = e.options[0]
            set0 = QBarSet('Averages')

            for x in e.options:
                avg = 0
                for y in x.votes.values():
                    avg += y
                avg = avg/len(c.users)
                averages[x] = avg
                choices.append(x.name)
            for x in averages:
                if (averages[x] < top):
                    top = averages[x]
                    winner = x
                set0.append(averages[x])

            winner.chosen = True
            e.status = True

            res = QBarSeries()
            res.append(set0)
            graph = QChart()
            graph.addSeries(res)
            graph.setTitle('Voting Results')
            graph.setAnimationOptions(QChart.SeriesAnimations)
            x_axis = QBarCategoryAxis()
            x_axis.append(choices)
            y_axis = QValueAxis()
            graph.addAxis(x_axis, Qt.AlignBottom)
            graph.addAxis(y_axis, Qt.AlignLeft)
            res.attachAxis(y_axis)
            graph.legend().setVisible(True)
            graph.legend().setAlignment(Qt.AlignBottom)

            self.winner_msg = VoteRes(self)
            self.winner_msg.setWindowTitle("Voting Results")
            self.winner_msg.chart_view.setChart(graph)
            self.winner_msg.winner_label.setText(winner.name + " has won the masses.")
            #for y in sorted(averages.values()):
                #self.f = QtWidgets.QFrame(self.winner_msg)
                #self.f.setGeometry(QtCore.QRect(100, 100, 100, 100))
                #self.f.setFrameShape(QtWidgets.QFrame.StyledPanel)
                #self.f.setFrameShadow(QtWidgets.QFrame.Raised)

                #self.l = QtWidgets.QLabel(self.f)
                #self.l.setGeometry(QtCore.QRect(0, 20, 150, 13))
                #self.l.setText(QtCore.QCoreApplication.translate("MainWindow", ""+str(y)+". "+str(y)+""))

                #self.winner_msg.vote_scroll_contents_2.layout().addWidget(self.f)
            self.winner_msg.show()

class LoadingScreen(QMainWindow):
    def __init__(self, parent):
        super(LoadingScreen, self).__init__(parent)
        self.parent = parent
        self.setFixedSize(200, 200)
        self.anim_label = QtWidgets.QLabel(self)
        self.anim_label.setGeometry(QtCore.QRect(0, 0, 200, 200))
        self.movie = QMovie("loading.gif")
        self.anim_label.setMovie(self.movie)

    def startAnim(self):
        self.movie.start()
        self.show()

    def stopAnim(self):
        self.movie.stop()
        self.close()

class OptionSettings(QMainWindow):
    def __init__(self, parent, e):
        super(OptionSettings, self).__init__(parent)
        self.parent = parent
        loadUi("options.ui", self)
        self.submit_option.clicked.connect(lambda checked, a=e: self.submit(e))
        self.remove_option.clicked.connect(lambda checked, a=e: self.remove(e))

    def submit(self, e):
        o = Option(self.options_name.text(), self.options_activity.text(), self.options_location.text(), None, False, {})
        e.options.append(o)
        #f = QtWidgets.QFrame()
        #frames = votingwidget.Ui_Form()
        #frames.setupUi(f)
        #f.setObjectName("option_frame_"+self.options_name.text())
        #choices = self.voting_window.optionComboBox(f, o)
        #for i in self.voting_window.cbs:
            #i.addItem("Choice {0}".format(len(self.voting_window.cbs)+1))
        #self.voting_window.cbs.append(choices)
        #content = "Name: " + self.options_name.text() + "\nActivity: " + self.options_activity.text() + "\nLocation: " + self.options_location.text() + "\nTime: " + str(None) + "\n"
        #frames.option_info.setText(content)
        #self.voting_window.vote_scroll_contents.layout().addWidget(f)

        self.close()

    def remove(self, e):
        count = 0
        #found = False
        for i in e.options:
            if i.name == self.options_del_name.text():
                e.options.remove(i)
                #found = True
                print("Removed!")
                break
            count += 1
        #if found == True:
            #self.voting_window.cbs.remove(self.voting_window.cbs[count])
            #for j in self.voting_window.cbs:
                #j.removeItem(len(self.voting_window.cbs))
            #temp = self.voting_window.vote_scroll_contents.findChild(QtWidgets.QFrame, "option_frame_"+self.options_del_name.text())
            #self.voting_window.vote_scroll_contents.layout().removeWidget(temp)
            #self.close()
        self.close()

class AddMember(QMainWindow):
    def __init__(self, parent):
        super(AddMember, self).__init__(parent)
        self.parent = parent
        #with importlib_resources.path(bin, "newmember.ui") as p:
        #    path = p
        loadUi("newmember.ui", self)
        self.submission_button.clicked.connect(self.submit)


    def submit(self):
        if not Data.get_users(self.name_entry.text()):
            print("User does not exist!")
        else:

            # ui.add_member_group(new_user, str(self.group_name_entry.text()))
            #Data.add_user(User(new_user))
            if len(Data.get_groups()) != 0:
                #groupindex = [x[0] for x in self.parent.circlearr].index(self.group_name_entry.text())
                self.memwidget = loadUi("member.ui")
                valid = True
                currentgroup = Data.get_groups(self.parent.current_group)
                userarray = currentgroup.users
                if self.name_entry.text() in userarray:
                    print("User already in group!")
                else:
                    member = Data.get_users(self.name_entry.text())
                    grouparray = member.groups
                    grouparray.append(currentgroup.name)
                    Data.update_user(User(member.name, member.password, member.constraints, grouparray))
                    userarray.append(self.name_entry.text())
                    Data.update_group(Group(currentgroup.name, currentgroup.calendar, userarray, currentgroup.events, currentgroup.messages))
                    self.memwidget.removeButton.clicked.connect(lambda: self.parent.removeMember(currentgroup.name, self.name_entry.text()))
                    self.memwidget.memberName.setText(self.name_entry.text())
                    self.parent.merger_scrollAreaWidgetContents_2.layout().addWidget(self.memwidget)
                    print("Added New Member")


            else:
                print("No current circles!")
        self.close()



class NewEvent(QMainWindow):
    def __init__(self, parent):
        super(NewEvent, self).__init__(parent)
        self.parent = parent
        #with importlib_resources.path(bin, "newevent.ui") as p:
        #   path = p
        loadUi("newevent.ui", self)
        self.submission_button.clicked.connect(self.submit)

    def submit(self):
        if len(Data.get_groups()) != 0:
            self.memwidget = loadUi("member.ui")
            valid = True
            currentgroup = self.parent.current_group
            eventarray = Data.get_events(None, currentgroup)
            if Data.get_groups(currentgroup) in eventarray:
                print("Event already in group!")
            else:
                new_event = Event(str(self.name_entry.text()), str(self.date_entry.text()), [], currentgroup)
                Data.add_event(new_event)
                print(Data.get_events(new_event.name, new_event.group))

                app = QtWidgets.QFrame()
                frames = eventwidget.Ui_Form()
                frames.setupUi(app)
                frames.name_label.setText("Name: " + self.name_entry.text())
                frames.date_label.setText("Date: " + self.date_entry.text())
                frames.vote_go_button.clicked.connect(lambda checked, a=new_event, b=currentgroup: self.parent.gotovoting(a,b))
                frames.op_go_button.clicked.connect(lambda checked, a=new_event: self.parent.gotooptions(a))
                # self.parent.scrollAreaWidgetContents.layout().addWidget(app)
                self.parent.merger_scrollAreaWidgetContents.layout().addWidget(app)  # adds to merged events and not events pg

                eventarray.append(new_event)
                currentgroup = Data.get_groups(currentgroup)
                Data.update_group(Group(currentgroup.name, currentgroup.calendar, currentgroup.users, eventarray, currentgroup.messages))
                print("Added New Event")


        else:
            print("No current circles!")
        
        self.close()

class YourCircles(QMainWindow):
    def __init__(self, parent):
        super(YourCircles, self).__init__(parent)
        self.parent = parent
        loadUi("yourcircles.ui", self)
        for groups in Data.get_users(self.parent.current_user.name).groups:
            self.groupbutton = QtWidgets.QPushButton()
            self.groupbutton.setText(groups)
            font = QtGui.QFont()
            font.setPointSize(18)
            self.groupbutton.setFont(font)
            self.groupbutton.clicked.connect(partial(self.updateGroup, Data.get_groups(groups)))
            self.circlesDisplay.layout().addWidget(self.groupbutton)
    def updateGroup(self, i):
        self.parent.update_group(i)
        self.close()


if __name__ == "__main__":
    main()
